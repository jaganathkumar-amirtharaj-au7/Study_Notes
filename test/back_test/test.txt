1)difference between forward proxy and reverse proxy
Answer:-
Forward Proxy:-
-->Forward Proxy is used in client side internal network
-->when we enter a url and hit enter our request doesnt directly go to webserver,
instead our request is sent to our proxy server and then to  ISP(Internet Service provider) and then it is transmitted to the webserver
-->forward proxy is for handling the  client 
--> it also acts as a caching server,
-->it can also be used to block particular url or domain 
Reverse Proxy:-
-->Reverse Proxy is used in server side internal network
-->when a request is made from client, reverse proxy server acts as a security gateway between client and server, 
-->Reverse proxy acts as a Load Balancer eg:- when there is huge number of request, it handles the request 
--> it is also Content Delivery Network(CDN) which is used for delivery of faster content 

2) What is Caching and what are the different types of cache. What are the different ways
to update cache? 
Catching is a process where our files or data are stored temporarily and are accessed, when user multiple users access the same files or same user access the file multiple times 
client server needs to access the DB multiple times and fetch the same data,its time consuming and not efficient so here comes the catche where the file or data is temporarily stored 
so the client can access easily and doesnt need to access database everytime for the data
There is three types of cache:
--->direct-mapped cache;
--->fully associative cache;
--->N-way-set-associative cache.
Fully Associative cache:-
In a fully associative cache every memory location can be cached in any cache line. This memory type significantly decreases amount of cache-line misses, considered as complex type of cache memory implementation.
Direct-mapped cache:-
In direct-mapped cache cache memory location maps to a single cache line. It can be used once per address per amount of time. Performance of this cache memory type is lower than others.
N-way-set-associative cache:-
In N-way-set-associative cache, the most common cache implementation, memory address can be stored in any N lines of cache.

3) Differentiate between RPC and REST?
Solution:-RPC-based APIs are great for actions 
REST-based APIs are great for modeling your domain (that is, resources or entities), making CRUD (create, read, update, delete) available for all of your data.
 REST is not only CRUD, but things are done through mainly CRUD-based operations.

4) Explain OWASP Top 10 vulnerabilities.
Injection. Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.
Broken Authentication. Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.
Sensitive Data Exposure. Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.
XML External Entities (XXE). Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks.
Broken Access Control. Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users’ accounts, view sensitive files, modify other users’ data, change access rights, etc.
Security Misconfiguration. Security misconfiguration is the most commonly seen issue. This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers, and verbose error messages containing sensitive information. Not only must all operating systems, frameworks, libraries, and applications be securely configured, but they must be patched/upgraded in a timely fashion.
Cross-Site Scripting (XSS). XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim’s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.
Insecure Deserialization. Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.
Using Components with Known Vulnerabilities. Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts.
Insufficient Logging & Monitoring. Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems, and tamper, extract, or destroy data. Most breach studies show time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.

5)What is HTTP? Differentiate between HTTP and TCP. Differentiate between GET,
POST, PUT and PATCH?
HTTP stands for Hypertext Transfer Protocol,HTTP is the protocol used to transfer data over the web.
some commen http error codes are 
200 - when successfull response 
301 - when url is changed or redirection to new url
401 - when user access is denied
403 - when user is not allowed to view particular  page or directory
500 - server error
Get:-Using this GET Method we can fetch data from the requested URl,
POST-Used to POST url response to the server or DB, like writing to database
Put:-Used to update Data in database
Patch:-modify data without modifying or effecting other parts of the data.

6)Explain How DNS works?
Domain Name System, Dns converts Domain name to IP Addresses, when a webaddress is searched it is converted to IP Addresses
The DNS is just like a server where all the domain names are stored in the form of IP Address, when a request from a client is made
the request is in the form of ip address and immediatly the webaddress is converted to IP address and it is fetched,
When a we search immediatly the qurry is transfered to request server and when it matches it send the data or requested webserver, 
if it is not found then request is transmitted to root server and it check and sends the result


7) Explain CDN and HOW it works. Does it use some caching technique?-



8)Differentiate between SQL and NO-SQL database?
Answer:-
SQL:-
-->SQL databases are relational,
-->SQL databases use structured query language
-->SQL databases are table based,
-->These databases are best suited for complex queries
NOSQL:-
-->NoSQL databases have dynamic schemas for unstructured data
-->Non-relational or distributed database system.
-->while NoSQL databases are document, key-value, 
-->These databases are not so good for complex queries

